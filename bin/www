#!/usr/bin/env node

var debugHTTP = require('debug').debug('backend:serverHTTP');
var debugHTTPS = require('debug').debug('backend:serverHTTPS');
var path = require('path');
var http = require('http');
var https = require('https');
var fs = require('fs');

var config = require(path.join(__dirname, '../config'));
var appRedirect = require(path.join(__dirname, '../app-redirect'));
var app = require(path.join(__dirname, '../app'));


/**
 * Get env, ip and port from environment and store in Express.
 */
var env = config.get("env");
appRedirect.set('env', env);
app.set('env', env);

var httpPort = config.get("backend.http_port");
var httpsPort = config.get("backend.https_port");
appRedirect.set('port', httpPort);
app.set('port', httpsPort);

var httpsRedirect = config.get("backend.https_redirect");
var wwwRedirect = config.get("backend.www_redirect");
appRedirect.set('https_redirect', httpsRedirect);
appRedirect.set('www_redirect', wwwRedirect);
app.set('www_redirect', wwwRedirect);


if (config.get("backend.secure_mode")) {
  createHTTPServer(appRedirect);
  createHTTPSServer(app);
} else {
  createHTTPServer(app);
}



/**
 * Create HTTP server.
 */
function createHTTPServer (app) {
  var serverHTTP = http.createServer(app);
  serverHTTP.listen(httpPort);
  serverHTTP.on('error', onError({
    debug: debugHTTP,
    port: httpPort,
  }));
  serverHTTP.on('listening', onListening({
    debug: debugHTTP,
    address: serverHTTP.address(),
  }));
}


/**
 * Create HTTPS server.
 */
function createHTTPSServer (app) {
  const httpsOptions = {
    key: fs.readFileSync(
      path.join(__dirname, "../", config.get("backend.ssl.key"))
    ),
    cert: fs.readFileSync(
      path.join(__dirname, "../", config.get("backend.ssl.cert"))
    ),
  };

  var serverHTTPS = https.createServer(httpsOptions, app);
  serverHTTPS.listen(httpsPort);
  serverHTTPS.on('error', onError({
    debug: debugHTTPS,
    port: httpsPort,
  }));
  serverHTTPS.on('listening', onListening({
    debug: debugHTTPS,
    address: serverHTTPS.address(),
  }));
  return serverHTTPS;
}


/**
 * Event listener for server "error" event.
 */
function onError(options) {
  var debug = options.debug;

  return function (error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof options.port === 'string'
      ? 'Pipe ' + options.port
      : 'Port ' + options.port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        debug(bind + ' requires elevated privileges');
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        debug(bind + ' is already in use');
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
}


/**
 * Event listener for server "listening" event.
 */
function onListening(options) {
  var debug = options.debug;

  return function () {
    var bind = typeof options.address === 'object'
      ? 'port ' + options.address.port
      : 'pipe ' + options.address;
    debug('Listening on ' + bind);
  }
}
